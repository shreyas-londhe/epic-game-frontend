{"version":3,"sources":["constants.js","assets/twitter-logo.svg","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","chakra","toNumber","maxChakra","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","mintCharacterNFTAction","characterId","a","console","log","mintCharacterNFT","txn","wait","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","alert","getCharacters","getAllDefaultCharacters","charactersTxn","map","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","length","character","index","src","alt","type","onClick","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","attackBoss","attackTxn","setTimeout","error","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossChakra","newPlayerChakra","bossChakra","playerChakra","prevState","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","request","method","accounts","account","connectWalletAction","fetchNFTMetadata","provider","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64ddca3a.chunk.js","sourcesContent":["const CONTRACT_ADDRESS = '0x1e8C51ADEe50b57970ccDDD328b0c7eB8d0423BF';\n\nconst transformCharacterData = (characterData) => {\n  return {\n    name: characterData.name,\n    imageURI: characterData.imageURI,\n    chakra: characterData.chakra.toNumber(),\n    maxChakra: characterData.maxChakra.toNumber(),\n    attackDamage: characterData.attackDamage.toNumber(),\n  };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };\n","export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useState, useEffect } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  const mintCharacterNFTAction = async (characterId) => {\n    try {\n      if (gameContract) {\n        setMintingCharacter(true);\n        console.log('Character minting in progress...');\n        const txn = await gameContract.mintCharacterNFT(characterId);\n        await txn.wait();\n        console.log('Character minted successfully!');\n        console.log(`Mint Txn: ${txn}`);\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className='character-item' key={character.name}>\n        <div className='name-container'>\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type='button'\n          className='character-mint-button'\n          onClick={() => mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n      setGameContract(gameContract);\n    } else {\n      alert('Please install MetaMask');\n    }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n\n        const characters = charactersTxn.map((characterData) => {\n          return transformCharacterData(characterData);\n        });\n        console.log(characters);\n\n        setCharacters(characters);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n      alert(\n        `Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${gameContract}/${tokenId.toNumber()}`\n      );\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log(`Character NFT: ${characterNFT}`);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n\n    return () => {\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  return (\n    <div className='select-character-container'>\n      <h2>Mint your Ninja. Choose wisely.</h2>\n      {characters.length > 0 && (\n        <div className='character-grid'>{renderCharacters()}</div>\n      )}\n      {mintingCharacter && (\n        <div className='loading'>\n          <div className='indicator'>\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src='https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g'\n            alt='Minting loading indicator'\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;\n","import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\n\nimport './Arena.css';\n\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState(null);\n  const [showToast, setShowToast] = useState(false);\n\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState('attacking');\n        console.log('Attacking boss...');\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log('attackTxn:', attackTxn);\n        setAttackState('hit');\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setAttackState('');\n    }\n  };\n\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n      setGameContract(gameContract);\n    } else {\n      console.log('No ethereum found');\n    }\n  }, []);\n\n  useEffect(() => {\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log(`Boss txn: ${bossTxn}`);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    const onAttackComplete = (newBossChakra, newPlayerChakra) => {\n      const bossChakra = newBossChakra.toNumber();\n      const playerChakra = newPlayerChakra.toNumber();\n      console.log(\n        `AttackComplete: Boss Hp: ${bossChakra} Player Hp: ${playerChakra}`\n      );\n\n      setBoss((prevState) => {\n        return { ...prevState, chakra: bossChakra };\n      });\n\n      setCharacterNFT((prevState) => {\n        return { ...prevState, chakra: playerChakra };\n      });\n    };\n\n    if (gameContract) {\n      fetchBoss();\n      gameContract.on('AttackComplete', onAttackComplete);\n    }\n\n    return () => {\n      if (gameContract) {\n        gameContract.off('AttackComplete', onAttackComplete);\n      }\n    };\n  }, [gameContract]);\n\n  return (\n    <div className='arena-container'>\n      {boss && showToast && (\n        <div id='toast' className='show'>\n          <div id='desc'>{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n      {boss && (\n        <div className='boss-container'>\n          <div className={`boss-content ${attackState}`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className='image-content'>\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className='health-bar'>\n                <progress value={boss.chakra} max={boss.maxChakra} />\n                <p>{`${boss.chakra} / ${boss.maxChakra} Chakra`}</p>\n              </div>\n            </div>\n          </div>\n          <div className='attack-container'>\n            <button className='cta-button' onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n            {attackState === 'attacking' && (\n              <div className='loading-indicator'>\n                <LoadingIndicator />\n                <p>Attacking ⚔️</p>\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      {characterNFT && (\n        <div className='players-container'>\n          <div className='player-container'>\n            <h2>Your Character</h2>\n            <div className='player'>\n              <div className='image-content'>\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className='health-bar'>\n                  <progress\n                    value={characterNFT.chakra}\n                    max={characterNFT.maxChakra}\n                  />\n                  <p>{`${characterNFT.chakra} / ${characterNFT.maxChakra} Chakra`}</p>\n                </div>\n              </div>\n              <div className='stats'>\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Arena;\n","import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport myEpicGame from './utils/MyEpicGame.json';\n\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n\nimport SelectCharacter from './Components/SelectCharacter';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        return;\n      } else {\n        console.log('Ethereum onject detected!');\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n      if (accounts.length === 0) {\n        console.log('Make sure you have an account!');\n        return;\n      } else {\n        const account = accounts[0];\n        setCurrentAccount(account);\n        console.log(`Account found is: ${account}`);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const renderContent = () => {\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n\n    if (!currentAccount) {\n      return (\n        <div className='connect-wallet-container'>\n          <img\n            src='https://64.media.tumblr.com/tumblr_mbia5vdmRd1r1mkubo1_500.gifv'\n            alt='Monty Python Gif'\n          />\n          <button\n            className='cta-button connect-wallet-button'\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else if (currentAccount && characterNFT) {\n      return (\n        <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />\n      );\n    }\n  };\n\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        return;\n      } else {\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n        setCurrentAccount(accounts[0]);\n        console.log(`Account connected is: ${accounts[0]}`);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    const fetchNFTMetadata = async () => {\n      setIsLoading(true);\n      console.log('Checking for Character NFT on address:', currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log(\n          `User has character NFT: ${transformCharacterData(txn).name}`\n        );\n        setCharacterNFT(transformCharacterData(txn));\n        console.log(`CharacterNFT: ${characterNFT}`);\n      } else {\n        console.log('User does not have character NFT');\n      }\n      setIsLoading(false);\n    };\n\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  return (\n    <div className='App'>\n      <div className='container'>\n        <div className='header-container'>\n          <p className='header gradient-text'>⚔️ Shinobi Showdown ⚔️</p>\n          <p className='sub-text'>Team up to protect the Ninja World!</p>\n          {renderContent()}\n        </div>\n        <div className='footer-container'>\n          <img alt='Twitter Logo' className='twitter-logo' src={twitterLogo} />\n          <a\n            className='footer-text'\n            href={TWITTER_LINK}\n            target='_blank'\n            rel='noreferrer'\n          >{`built with @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}